{"ast":null,"code":"import { tokenAPI, questionsAPI } from '../services/serviceAPI';\nexport const LOGIN = 'LOGIN';\nexport const REQUEST_API_DATA = 'REQUEST_API_DATA';\nexport const RECEIVE_API_DATA_SUCCESS = 'RECEIVE_API_DATA_SUCCESS';\nexport const RECEIVE_API_DATA_FAILURE = 'RECEIVE_API_DATA_FAILURE';\nexport const REQUEST_QUESTIONS = 'REQUEST_QUESTIONS';\nexport const RECEIVE_QUESTIONS_FROM_API = 'RECEIVE_QUESTIONS_FROM_API';\nexport const COUNTER = 'COUNTER';\nexport const DADOS = 'DADOS';\nexport const ZEROU = 'ZEROU';\nexport const dados = player => ({\n  type: DADOS,\n  player\n});\nexport const handleSubmit = login => ({\n  type: LOGIN,\n  login\n});\n\nconst requestAPIdata = () => ({\n  type: REQUEST_API_DATA\n});\n\nconst receiveAPIdataSuccess = data => ({\n  type: RECEIVE_API_DATA_SUCCESS,\n  data\n});\n\nconst receiveAPIdataFailure = error => ({\n  type: RECEIVE_API_DATA_FAILURE,\n  error\n});\n\nconst requestQuestions = () => ({\n  type: REQUEST_QUESTIONS\n});\n\nexport const receiveQuestionsFromAPI = data => ({\n  type: RECEIVE_QUESTIONS_FROM_API,\n  questions: data.results\n});\nexport const counter = () => ({\n  type: COUNTER\n});\nexport const zCounter = () => ({\n  type: ZEROU\n});\nexport function fetchToken() {\n  return dispatch => {\n    dispatch(requestAPIdata());\n    return tokenAPI().then(data => dispatch(receiveAPIdataSuccess(data)), error => dispatch(receiveAPIdataFailure(error)));\n  };\n}\nexport function fetchQuestions(data) {\n  return dispatch => {\n    dispatch(requestQuestions());\n    return questionsAPI(data).then(token => dispatch(receiveQuestionsFromAPI(token)));\n  };\n}","map":{"version":3,"sources":["/home/cd/trybe-projects/sd-05-project-trivia-react-redux-14/src/actions/index.js"],"names":["tokenAPI","questionsAPI","LOGIN","REQUEST_API_DATA","RECEIVE_API_DATA_SUCCESS","RECEIVE_API_DATA_FAILURE","REQUEST_QUESTIONS","RECEIVE_QUESTIONS_FROM_API","COUNTER","DADOS","ZEROU","dados","player","type","handleSubmit","login","requestAPIdata","receiveAPIdataSuccess","data","receiveAPIdataFailure","error","requestQuestions","receiveQuestionsFromAPI","questions","results","counter","zCounter","fetchToken","dispatch","then","fetchQuestions","token"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,YAAnB,QAAuC,wBAAvC;AAEA,OAAO,MAAMC,KAAK,GAAG,OAAd;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,wBAAwB,GAAG,0BAAjC;AACP,OAAO,MAAMC,wBAAwB,GAAG,0BAAjC;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,0BAA0B,GAAG,4BAAnC;AACP,OAAO,MAAMC,OAAO,GAAG,SAAhB;AACP,OAAO,MAAMC,KAAK,GAAG,OAAd;AACP,OAAO,MAAMC,KAAK,GAAG,OAAd;AAEP,OAAO,MAAMC,KAAK,GAAIC,MAAD,KAAa;AAChCC,EAAAA,IAAI,EAAEJ,KAD0B;AAEhCG,EAAAA;AAFgC,CAAb,CAAd;AAKP,OAAO,MAAME,YAAY,GAAIC,KAAD,KAAY;AACtCF,EAAAA,IAAI,EAAEX,KADgC;AAEtCa,EAAAA;AAFsC,CAAZ,CAArB;;AAKP,MAAMC,cAAc,GAAG,OAAO;AAC5BH,EAAAA,IAAI,EAAEV;AADsB,CAAP,CAAvB;;AAIA,MAAMc,qBAAqB,GAAIC,IAAD,KAAW;AACvCL,EAAAA,IAAI,EAAET,wBADiC;AAEvCc,EAAAA;AAFuC,CAAX,CAA9B;;AAKA,MAAMC,qBAAqB,GAAIC,KAAD,KAAY;AACxCP,EAAAA,IAAI,EAAER,wBADkC;AAExCe,EAAAA;AAFwC,CAAZ,CAA9B;;AAKA,MAAMC,gBAAgB,GAAG,OAAO;AAC9BR,EAAAA,IAAI,EAAEP;AADwB,CAAP,CAAzB;;AAIA,OAAO,MAAMgB,uBAAuB,GAAIJ,IAAD,KAAW;AAChDL,EAAAA,IAAI,EAAEN,0BAD0C;AAEhDgB,EAAAA,SAAS,EAAEL,IAAI,CAACM;AAFgC,CAAX,CAAhC;AAKP,OAAO,MAAMC,OAAO,GAAG,OAAO;AAC5BZ,EAAAA,IAAI,EAAEL;AADsB,CAAP,CAAhB;AAIP,OAAO,MAAMkB,QAAQ,GAAG,OAAO;AAC7Bb,EAAAA,IAAI,EAAEH;AADuB,CAAP,CAAjB;AAIP,OAAO,SAASiB,UAAT,GAAsB;AAC3B,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACZ,cAAc,EAAf,CAAR;AAEA,WAAOhB,QAAQ,GAAG6B,IAAX,CACJX,IAAD,IAAUU,QAAQ,CAACX,qBAAqB,CAACC,IAAD,CAAtB,CADb,EAEJE,KAAD,IAAWQ,QAAQ,CAACT,qBAAqB,CAACC,KAAD,CAAtB,CAFd,CAAP;AAID,GAPD;AAQD;AAED,OAAO,SAASU,cAAT,CAAwBZ,IAAxB,EAA8B;AACnC,SAAQU,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;AAEA,WAAOpB,YAAY,CAACiB,IAAD,CAAZ,CAAmBW,IAAnB,CAAyBE,KAAD,IAC7BH,QAAQ,CAACN,uBAAuB,CAACS,KAAD,CAAxB,CADH,CAAP;AAGD,GAND;AAOD","sourcesContent":["import { tokenAPI, questionsAPI } from '../services/serviceAPI';\n\nexport const LOGIN = 'LOGIN';\nexport const REQUEST_API_DATA = 'REQUEST_API_DATA';\nexport const RECEIVE_API_DATA_SUCCESS = 'RECEIVE_API_DATA_SUCCESS';\nexport const RECEIVE_API_DATA_FAILURE = 'RECEIVE_API_DATA_FAILURE';\nexport const REQUEST_QUESTIONS = 'REQUEST_QUESTIONS';\nexport const RECEIVE_QUESTIONS_FROM_API = 'RECEIVE_QUESTIONS_FROM_API';\nexport const COUNTER = 'COUNTER';\nexport const DADOS = 'DADOS';\nexport const ZEROU = 'ZEROU';\n\nexport const dados = (player) => ({\n  type: DADOS,\n  player,\n});\n\nexport const handleSubmit = (login) => ({\n  type: LOGIN,\n  login,\n});\n\nconst requestAPIdata = () => ({\n  type: REQUEST_API_DATA,\n});\n\nconst receiveAPIdataSuccess = (data) => ({\n  type: RECEIVE_API_DATA_SUCCESS,\n  data,\n});\n\nconst receiveAPIdataFailure = (error) => ({\n  type: RECEIVE_API_DATA_FAILURE,\n  error,\n});\n\nconst requestQuestions = () => ({\n  type: REQUEST_QUESTIONS,\n});\n\nexport const receiveQuestionsFromAPI = (data) => ({\n  type: RECEIVE_QUESTIONS_FROM_API,\n  questions: data.results,\n});\n\nexport const counter = () => ({\n  type: COUNTER,\n});\n\nexport const zCounter = () => ({\n  type: ZEROU,\n});\n\nexport function fetchToken() {\n  return (dispatch) => {\n    dispatch(requestAPIdata());\n\n    return tokenAPI().then(\n      (data) => dispatch(receiveAPIdataSuccess(data)),\n      (error) => dispatch(receiveAPIdataFailure(error)),\n    );\n  };\n}\n\nexport function fetchQuestions(data) {\n  return (dispatch) => {\n    dispatch(requestQuestions());\n\n    return questionsAPI(data).then((token) =>\n      dispatch(receiveQuestionsFromAPI(token)),\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}