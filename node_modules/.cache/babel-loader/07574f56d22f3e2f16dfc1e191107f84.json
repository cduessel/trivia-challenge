{"ast":null,"code":"import _objectSpread from\"/home/cd/trivia-challenge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{combineReducers}from'redux';import{LOGIN,REQUEST_API_DATA,RECEIVE_API_DATA_SUCCESS,RECEIVE_API_DATA_FAILURE,RECEIVE_QUESTIONS_FROM_API,REQUEST_QUESTIONS,COUNTER,DADOS,ZEROU,CLEARLOG,ZERODADOS}from'../actions';var INITIAL_STATE_LOGIN={login:{nome:'',email:'',hash:'',placar:0}};function loginReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:INITIAL_STATE_LOGIN;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case LOGIN:return _objectSpread({},state,{login:{nome:action.login.nome,email:action.login.email,hash:action.login.hash,placar:action.login.placar}});case CLEARLOG:return _objectSpread({},state,{login:{nome:'',email:'',hash:'',placar:''}});default:return state;}}var INITIAL_STATE_PLACAR={scoreR:0,assertionsR:0};function placarReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:INITIAL_STATE_PLACAR;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case DADOS:return _objectSpread({},state,{scoreR:action.player.score,assertionsR:action.player.assertions});case ZERODADOS:return _objectSpread({},state,{scoreR:0,assertionsR:0});default:return state;}}var INITIAL_STATE_TOKEN={token:'',questions:[],isFetching:false};function tokenReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:INITIAL_STATE_TOKEN;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case REQUEST_API_DATA:return _objectSpread({},state,{isFetching:true});case RECEIVE_API_DATA_SUCCESS:return _objectSpread({},state,{token:action.token,isFetching:false});case RECEIVE_API_DATA_FAILURE:return _objectSpread({},state,{error:action.error,isFetching:false});case REQUEST_QUESTIONS:return _objectSpread({},state,{isFetching:true});case RECEIVE_QUESTIONS_FROM_API:return _objectSpread({},state,{questions:action.questions,isFetching:false});default:return state;}}var INITIAL_STATE_COUNTER={count:0};function counterReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:INITIAL_STATE_COUNTER;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case COUNTER:return _objectSpread({},state,{count:state.count+1});case ZEROU:return _objectSpread({},state,{count:0});default:return state;}}var rootReducer=combineReducers({loginReducer:loginReducer,tokenReducer:tokenReducer,counterReducer:counterReducer,placarReducer:placarReducer});export default rootReducer;","map":{"version":3,"sources":["/home/cd/trivia-challenge/src/reducers/index.js"],"names":["combineReducers","LOGIN","REQUEST_API_DATA","RECEIVE_API_DATA_SUCCESS","RECEIVE_API_DATA_FAILURE","RECEIVE_QUESTIONS_FROM_API","REQUEST_QUESTIONS","COUNTER","DADOS","ZEROU","CLEARLOG","ZERODADOS","INITIAL_STATE_LOGIN","login","nome","email","hash","placar","loginReducer","state","action","type","INITIAL_STATE_PLACAR","scoreR","assertionsR","placarReducer","player","score","assertions","INITIAL_STATE_TOKEN","token","questions","isFetching","tokenReducer","error","INITIAL_STATE_COUNTER","count","counterReducer","rootReducer"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\nimport {\n  LOGIN,\n  REQUEST_API_DATA,\n  RECEIVE_API_DATA_SUCCESS,\n  RECEIVE_API_DATA_FAILURE,\n  RECEIVE_QUESTIONS_FROM_API,\n  REQUEST_QUESTIONS,\n  COUNTER,\n  DADOS,\n  ZEROU,\n  CLEARLOG,\n  ZERODADOS,\n} from '../actions';\n\nconst INITIAL_STATE_LOGIN = {\n  login: {\n    nome: '',\n    email: '',\n    hash: '',\n    placar: 0,\n  },\n};\n\nfunction loginReducer(state = INITIAL_STATE_LOGIN, action) {\n  switch (action.type) {\n    case LOGIN:\n      return {\n        ...state,\n        login: {\n          nome: action.login.nome,\n          email: action.login.email,\n          hash: action.login.hash,\n          placar: action.login.placar,\n        },\n      };\n    case CLEARLOG:\n      return {\n        ...state,\n        login: {\n          nome: '',\n          email: '',\n          hash: '',\n          placar: '',\n        },\n      };\n    default:\n      return state;\n  }\n}\n\nconst INITIAL_STATE_PLACAR = {\n  scoreR: 0,\n  assertionsR: 0,\n};\n\nfunction placarReducer(state = INITIAL_STATE_PLACAR, action) {\n  switch (action.type) {\n    case DADOS:\n      return {\n        ...state,\n        scoreR: action.player.score,\n        assertionsR: action.player.assertions,\n      };\n    case ZERODADOS:\n      return {\n        ...state,\n        scoreR: 0,\n        assertionsR: 0,\n      };\n    default:\n      return state;\n  }\n}\n\nconst INITIAL_STATE_TOKEN = {\n  token: '',\n  questions: [],\n  isFetching: false,\n};\n\nfunction tokenReducer(state = INITIAL_STATE_TOKEN, action) {\n  switch (action.type) {\n    case REQUEST_API_DATA:\n      return { ...state, isFetching: true };\n    case RECEIVE_API_DATA_SUCCESS:\n      return {\n        ...state,\n        token: action.token,\n        isFetching: false,\n      };\n    case RECEIVE_API_DATA_FAILURE:\n      return {\n        ...state,\n        error: action.error,\n        isFetching: false,\n      };\n    case REQUEST_QUESTIONS:\n      return {\n        ...state,\n        isFetching: true,\n      };\n    case RECEIVE_QUESTIONS_FROM_API:\n      return {\n        ...state,\n        questions: action.questions,\n        isFetching: false,\n      };\n    default:\n      return state;\n  }\n}\n\nconst INITIAL_STATE_COUNTER = {\n  count: 0,\n};\n\nfunction counterReducer(state = INITIAL_STATE_COUNTER, action) {\n  switch (action.type) {\n    case COUNTER:\n      return { ...state, count: state.count + 1 };\n    case ZEROU:\n      return { ...state, count: 0 };\n    default:\n      return state;\n  }\n}\n\nconst rootReducer = combineReducers({\n  loginReducer,\n  tokenReducer,\n  counterReducer,\n  placarReducer,\n});\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}