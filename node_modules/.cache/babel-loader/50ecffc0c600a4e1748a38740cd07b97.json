{"ast":null,"code":"import _objectSpread from \"/home/cd/trybe-projects/sd-05-project-trivia-react-redux-14/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { combineReducers } from 'redux';\nimport { LOGIN, REQUEST_API_DATA, RECEIVE_API_DATA_SUCCESS, RECEIVE_API_DATA_FAILURE, RECEIVE_QUESTIONS_FROM_API, REQUEST_QUESTIONS, COUNTER, DADOS, ZEROU, CLEARLOG } from '../actions';\nconst INITIAL_STATE_LOGIN = {\n  login: {\n    nome: '',\n    email: '',\n    hash: '',\n    placar: 0\n  }\n};\n\nfunction loginReducer(state = INITIAL_STATE_LOGIN, action) {\n  switch (action.type) {\n    case LOGIN:\n      return _objectSpread({}, state, {\n        login: {\n          nome: action.login.nome,\n          email: action.login.email,\n          hash: action.login.hash,\n          placar: action.login.placar\n        }\n      });\n\n    case CLEARLOG:\n      return _objectSpread({}, state, {\n        login: {\n          nome: '',\n          email: '',\n          hash: '',\n          placar: ''\n        }\n      });\n\n    default:\n      return state;\n  }\n}\n\nconst INITIAL_STATE_PLACAR = {\n  scoreR: 0,\n  assertionsR: 0\n};\n\nfunction placarReducer(state = INITIAL_STATE_PLACAR, action) {\n  switch (action.type) {\n    case DADOS:\n      return _objectSpread({}, state, {\n        scoreR: action.player.score,\n        assertionsR: action.player.assertions\n      });\n\n    case ZERODADOS:\n      return _objectSpread({}, state, {\n        scoreR: 0,\n        assertionsR: 0\n      });\n\n    default:\n      return state;\n  }\n}\n\nconst INITIAL_STATE_TOKEN = {\n  token: '',\n  questions: [],\n  isFetching: false\n};\n\nfunction tokenReducer(state = INITIAL_STATE_TOKEN, action) {\n  switch (action.type) {\n    case REQUEST_API_DATA:\n      return _objectSpread({}, state, {\n        isFetching: true\n      });\n\n    case RECEIVE_API_DATA_SUCCESS:\n      return _objectSpread({}, state, {\n        token: action.token,\n        isFetching: false\n      });\n\n    case RECEIVE_API_DATA_FAILURE:\n      return _objectSpread({}, state, {\n        error: action.error,\n        isFetching: false\n      });\n\n    case REQUEST_QUESTIONS:\n      return _objectSpread({}, state, {\n        isFetching: true\n      });\n\n    case RECEIVE_QUESTIONS_FROM_API:\n      return _objectSpread({}, state, {\n        questions: action.questions,\n        isFetching: false\n      });\n\n    default:\n      return state;\n  }\n}\n\nconst INITIAL_STATE_COUNTER = {\n  count: 0\n};\n\nfunction counterReducer(state = INITIAL_STATE_COUNTER, action) {\n  switch (action.type) {\n    case COUNTER:\n      return _objectSpread({}, state, {\n        count: state.count + 1\n      });\n\n    case ZEROU:\n      return _objectSpread({}, state, {\n        count: 0\n      });\n\n    default:\n      return state;\n  }\n}\n\nconst rootReducer = combineReducers({\n  loginReducer,\n  tokenReducer,\n  counterReducer,\n  placarReducer\n});\nexport default rootReducer;","map":{"version":3,"sources":["/home/cd/trybe-projects/sd-05-project-trivia-react-redux-14/src/reducers/index.js"],"names":["combineReducers","LOGIN","REQUEST_API_DATA","RECEIVE_API_DATA_SUCCESS","RECEIVE_API_DATA_FAILURE","RECEIVE_QUESTIONS_FROM_API","REQUEST_QUESTIONS","COUNTER","DADOS","ZEROU","CLEARLOG","INITIAL_STATE_LOGIN","login","nome","email","hash","placar","loginReducer","state","action","type","INITIAL_STATE_PLACAR","scoreR","assertionsR","placarReducer","player","score","assertions","ZERODADOS","INITIAL_STATE_TOKEN","token","questions","isFetching","tokenReducer","error","INITIAL_STATE_COUNTER","count","counterReducer","rootReducer"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\nimport {\n  LOGIN,\n  REQUEST_API_DATA,\n  RECEIVE_API_DATA_SUCCESS,\n  RECEIVE_API_DATA_FAILURE,\n  RECEIVE_QUESTIONS_FROM_API,\n  REQUEST_QUESTIONS,\n  COUNTER,\n  DADOS,\n  ZEROU,\n  CLEARLOG,\n} from '../actions';\n\nconst INITIAL_STATE_LOGIN = {\n  login: {\n    nome: '',\n    email: '',\n    hash: '',\n    placar: 0,\n  },\n};\n\nfunction loginReducer(state = INITIAL_STATE_LOGIN, action) {\n  switch (action.type) {\n    case LOGIN:\n      return {\n        ...state,\n        login: {\n          nome: action.login.nome,\n          email: action.login.email,\n          hash: action.login.hash,\n          placar: action.login.placar,\n        },\n      };\n    case CLEARLOG:\n      return {\n        ...state,\n        login: {\n          nome: '',\n          email: '',\n          hash: '',\n          placar: '',\n        },\n      }\n    default:\n      return state;\n  }\n}\n\nconst INITIAL_STATE_PLACAR = {\n  scoreR: 0,\n  assertionsR: 0,\n};\n\nfunction placarReducer(state = INITIAL_STATE_PLACAR, action) {\n  switch (action.type) {\n    case DADOS:\n      return {\n        ...state,\n        scoreR: action.player.score,\n        assertionsR: action.player.assertions,\n      };\n    case ZERODADOS:\n      return {\n        ...state,\n        scoreR: 0,\n        assertionsR: 0,\n      };\n    default:\n      return state;\n  }\n}\n\nconst INITIAL_STATE_TOKEN = {\n  token: '',\n  questions: [],\n  isFetching: false,\n};\n\nfunction tokenReducer(state = INITIAL_STATE_TOKEN, action) {\n  switch (action.type) {\n    case REQUEST_API_DATA:\n      return { ...state, isFetching: true };\n    case RECEIVE_API_DATA_SUCCESS:\n      return {\n        ...state,\n        token: action.token,\n        isFetching: false,\n      };\n    case RECEIVE_API_DATA_FAILURE:\n      return {\n        ...state,\n        error: action.error,\n        isFetching: false,\n      };\n    case REQUEST_QUESTIONS:\n      return {\n        ...state,\n        isFetching: true,\n      };\n    case RECEIVE_QUESTIONS_FROM_API:\n      return {\n        ...state,\n        questions: action.questions,\n        isFetching: false,\n      };\n    default:\n      return state;\n  }\n}\n\nconst INITIAL_STATE_COUNTER = {\n  count: 0,\n};\n\nfunction counterReducer(state = INITIAL_STATE_COUNTER, action) {\n  switch (action.type) {\n    case COUNTER:\n      return { ...state, count: state.count + 1 };\n    case ZEROU:\n      return { ...state, count: 0};\n    default:\n      return state;\n  }\n}\n\nconst rootReducer = combineReducers({\n  loginReducer,\n  tokenReducer,\n  counterReducer,\n  placarReducer,\n});\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}