{"ast":null,"code":"import{tokenAPI,questionsAPI}from'../services/serviceAPI';export var LOGIN='LOGIN';export var REQUEST_API_DATA='REQUEST_API_DATA';export var RECEIVE_API_DATA_SUCCESS='RECEIVE_API_DATA_SUCCESS';export var RECEIVE_API_DATA_FAILURE='RECEIVE_API_DATA_FAILURE';export var REQUEST_QUESTIONS='REQUEST_QUESTIONS';export var RECEIVE_QUESTIONS_FROM_API='RECEIVE_QUESTIONS_FROM_API';export var COUNTER='COUNTER';export var DADOS='DADOS';export var ZEROU='ZEROU';export var CLEARLOG='CLEARLOG';export var ZERODADOS='ZERODADOS';export var dados=function dados(player){return{type:DADOS,player:player};};export var zeroDados=function zeroDados(){return{type:ZERODADOS};};export var handleSubmit=function handleSubmit(login){return{type:LOGIN,login:login};};export var clearLog=function clearLog(){return{type:CLEARLOG};};var requestAPIdata=function requestAPIdata(){return{type:REQUEST_API_DATA};};var receiveAPIdataSuccess=function receiveAPIdataSuccess(data){return{type:RECEIVE_API_DATA_SUCCESS,data:data};};var receiveAPIdataFailure=function receiveAPIdataFailure(error){return{type:RECEIVE_API_DATA_FAILURE,error:error};};var requestQuestions=function requestQuestions(){return{type:REQUEST_QUESTIONS};};export var receiveQuestionsFromAPI=function receiveQuestionsFromAPI(data){return{type:RECEIVE_QUESTIONS_FROM_API,questions:data.results};};export var counter=function counter(){return{type:COUNTER};};export var zCounter=function zCounter(){return{type:ZEROU};};export function fetchToken(){return function(dispatch){dispatch(requestAPIdata());return tokenAPI().then(function(data){return dispatch(receiveAPIdataSuccess(data));},function(error){return dispatch(receiveAPIdataFailure(error));});};}export function fetchQuestions(data){return function(dispatch){dispatch(requestQuestions());return questionsAPI(data).then(function(token){return dispatch(receiveQuestionsFromAPI(token));});};}","map":{"version":3,"sources":["/home/cd/trivia-challenge/src/actions/index.js"],"names":["tokenAPI","questionsAPI","LOGIN","REQUEST_API_DATA","RECEIVE_API_DATA_SUCCESS","RECEIVE_API_DATA_FAILURE","REQUEST_QUESTIONS","RECEIVE_QUESTIONS_FROM_API","COUNTER","DADOS","ZEROU","CLEARLOG","ZERODADOS","dados","player","type","zeroDados","handleSubmit","login","clearLog","requestAPIdata","receiveAPIdataSuccess","data","receiveAPIdataFailure","error","requestQuestions","receiveQuestionsFromAPI","questions","results","counter","zCounter","fetchToken","dispatch","then","fetchQuestions","token"],"mappings":"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","sourcesContent":["import { tokenAPI, questionsAPI } from '../services/serviceAPI';\n\nexport const LOGIN = 'LOGIN';\nexport const REQUEST_API_DATA = 'REQUEST_API_DATA';\nexport const RECEIVE_API_DATA_SUCCESS = 'RECEIVE_API_DATA_SUCCESS';\nexport const RECEIVE_API_DATA_FAILURE = 'RECEIVE_API_DATA_FAILURE';\nexport const REQUEST_QUESTIONS = 'REQUEST_QUESTIONS';\nexport const RECEIVE_QUESTIONS_FROM_API = 'RECEIVE_QUESTIONS_FROM_API';\nexport const COUNTER = 'COUNTER';\nexport const DADOS = 'DADOS';\nexport const ZEROU = 'ZEROU';\nexport const CLEARLOG = 'CLEARLOG';\nexport const ZERODADOS = 'ZERODADOS';\n\nexport const dados = (player) => ({\n  type: DADOS,\n  player,\n});\n\nexport const zeroDados = () => ({\n  type: ZERODADOS,\n});\n\nexport const handleSubmit = (login) => ({\n  type: LOGIN,\n  login,\n});\n\nexport const clearLog = () => ({\n  type: CLEARLOG,\n});\n\nconst requestAPIdata = () => ({\n  type: REQUEST_API_DATA,\n});\n\nconst receiveAPIdataSuccess = (data) => ({\n  type: RECEIVE_API_DATA_SUCCESS,\n  data,\n});\n\nconst receiveAPIdataFailure = (error) => ({\n  type: RECEIVE_API_DATA_FAILURE,\n  error,\n});\n\nconst requestQuestions = () => ({\n  type: REQUEST_QUESTIONS,\n});\n\nexport const receiveQuestionsFromAPI = (data) => ({\n  type: RECEIVE_QUESTIONS_FROM_API,\n  questions: data.results,\n});\n\nexport const counter = () => ({\n  type: COUNTER,\n});\n\nexport const zCounter = () => ({\n  type: ZEROU,\n});\n\nexport function fetchToken() {\n  return (dispatch) => {\n    dispatch(requestAPIdata());\n\n    return tokenAPI().then(\n      (data) => dispatch(receiveAPIdataSuccess(data)),\n      (error) => dispatch(receiveAPIdataFailure(error)),\n    );\n  };\n}\n\nexport function fetchQuestions(data) {\n  return (dispatch) => {\n    dispatch(requestQuestions());\n\n    return questionsAPI(data).then((token) =>\n      dispatch(receiveQuestionsFromAPI(token)),\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}